// context/ModalContext.tsx
"use client";

// !!! –ù–û–í–ï: –Ü–º–ø–æ—Ä—Ç—É—î–º–æ useEffect —Ç–∞ useState
import React, {
    createContext,
    useContext,
    useState,
    ReactNode,
    useEffect, // üëà !!! –ù–û–í–ï
} from 'react';
import MultiStepFormModal from '@/components/modals/MultiStepFormModal';

// ... (—ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å FormData –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω)
export interface FormData {
    address: string;
    bedrooms: string;
    bathrooms: string;
    squareFootage: string;
    yearBuilt: string;
    condition: string;
    agent: string;
    timeline: string;
    concern: string;
    firstName: string;
    lastName: string;
    email: string;
    phone: string;
}

// ... (initialFormData –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω)
const initialFormData: FormData = {
    address: '',
    bedrooms: '1',
    bathrooms: '1',
    squareFootage: '',
    yearBuilt: '',
    condition: 'Select condition...',
    agent: '',
    timeline: 'Select timeline...',
    concern: 'Select concern...',
    firstName: '',
    lastName: '',
    email: '',
    phone: '',
};

// !!! –ù–û–í–ï: –ö–ª—é—á –¥–ª—è localStorage
const LOCAL_STORAGE_KEY = 'multiStepFormData';

// !!! –ù–û–í–ï: –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –±–µ–∑–ø–µ—á–Ω–æ–≥–æ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—á–∞—Ç–∫–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö
const getInitialData = (): FormData => {
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –º–∏ –Ω–∞ –∫–ª—ñ—î–Ω—Ç—ñ (–≤ –±—Ä–∞—É–∑–µ—Ä—ñ)
    if (typeof window === 'undefined') {
        return initialFormData;
    }
    try {
        const savedData = localStorage.getItem(LOCAL_STORAGE_KEY);
        // –Ø–∫—â–æ –¥–∞–Ω—ñ —î, –ø–∞—Ä—Å–∏–º–æ —ó—Ö, —ñ–Ω–∞–∫—à–µ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤—ñ
        return savedData ? JSON.parse(savedData) : initialFormData;
    } catch (error) {
        console.error('Failed to parse form data from localStorage', error);
        return initialFormData; // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤—ñ —É —Ä–∞–∑—ñ –ø–æ–º–∏–ª–∫–∏
    }
};

// ... (—ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å ModalContextType –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω)
interface ModalContextType {
    isModalOpen: boolean;
    openModal: () => void;
    closeModal: () => void;
    currentStep: number;
    formData: FormData;
    isSubmitting: boolean;
    updateField: (field: keyof FormData, value: string | string[]) => void;
    nextStep: () => void;
    prevStep: () => void;
    handleSubmit: (e: React.FormEvent) => Promise<void>;
}

const ModalContext = createContext<ModalContextType | undefined>(undefined);

export const ModalProvider = ({ children }: { children: ReactNode }) => {
    const [isModalOpen, setIsModalOpen] = useState(false);
    const [currentStep, setCurrentStep] = useState(1);

    // !!! –ù–û–í–ï: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é-—ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ç–æ—Ä –¥–ª—è useState
    const [formData, setFormData] = useState<FormData>(getInitialData);

    const [isSubmitting, setIsSubmitting] = useState(false);

    // !!! –ù–û–í–ï: useEffect –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö —É localStorage
    // –¶–µ–π –µ—Ñ–µ–∫—Ç —Å–ø—Ä–∞—Ü—å–æ–≤—É—î –∫–æ–∂–Ω–æ–≥–æ —Ä–∞–∑—É, –∫–æ–ª–∏ `formData` –∑–º—ñ–Ω—é—î—Ç—å—Å—è
    useEffect(() => {
        if (typeof window !== 'undefined') {
            localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(formData));
        }
    }, [formData]); // –ó–∞–ª–µ–∂–Ω—ñ—Å—Ç—å - formData

    const openModal = () => setIsModalOpen(true);

    const closeModal = () => {
        setIsModalOpen(false);

        // !!! –ù–û–í–ï: –õ–æ–≥—ñ–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è —Ñ–æ—Ä–º–∏
        // –Ø–∫—â–æ –º–∏ –∑–∞–∫—Ä–∏–≤–∞—î–º–æ –º–æ–¥–∞–ª–∫—É *–ø—ñ—Å–ª—è* —É—Å–ø—ñ—à–Ω–æ—ó –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ (–∫—Ä–æ–∫ 4)
        // —Ç–æ –æ—á–∏—â—É—î–º–æ —Ñ–æ—Ä–º—É. –í —ñ–Ω—à–æ–º—É –≤–∏–ø–∞–¥–∫—É - –¥–∞–Ω—ñ –∑–∞–ª–∏—à–∞—é—Ç—å—Å—è.
        if (currentStep === 4) {
            setFormData(initialFormData);
            // useEffect –≤–∏—â–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –æ–Ω–æ–≤–∏—Ç—å localStorage
            // –Ω–∞ initialFormData
        }

        setCurrentStep(1);
        setIsSubmitting(false);
    };

    const updateField = (field: keyof FormData, value: string | string[]) => {
        setFormData((prev) => ({
            ...prev,
            [field]: value,
        }));
        // –ù–∞–º –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ —Ç—É—Ç –∑–±–µ—Ä—ñ–≥–∞—Ç–∏, useEffect –∑—Ä–æ–±–∏—Ç—å —Ü–µ
    };

    const nextStep = () => setCurrentStep((prev) => (prev < 4 ? prev + 1 : prev));
    const prevStep = () => setCurrentStep((prev) => (prev > 1 ? prev - 1 : prev));

    const handleSubmit = async (e: React.FormEvent) => {
        e.preventDefault();
        if (currentStep !== 3) return;

        setIsSubmitting(true);
        try {
            const response = await fetch('/api/submit-form', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(formData),
            });

            if (response.ok) {
                nextStep(); // –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –Ω–∞ –∫—Ä–æ–∫ 4 (–£—Å–ø—ñ—Ö)
                // !!! –ù–û–í–ï: –ú–∏ *–Ω–µ* –æ—á–∏—â—É—î–º–æ —Ñ–æ—Ä–º—É —Ç—É—Ç.
                // –ú–∏ –æ—á–∏—Å—Ç–∏–º–æ —ó—ó, –∫–æ–ª–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–∫—Ä–∏—î
                // –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—Ö (–≤ `closeModal`).
            } else {
                alert('An error occurred. Please try again.');
            }
        } catch (error) {
            console.error('Submission error:', error);
            alert('An error occurred. Please try again.');
        } finally {
            setIsSubmitting(false);
        }
    };

    const value = {
        isModalOpen,
        openModal,
        closeModal,
        currentStep,
        formData,
        isSubmitting,
        updateField,
        nextStep,
        prevStep,
        handleSubmit,
    };

    return (
        <ModalContext.Provider value={value}>
            {children}
            <MultiStepFormModal />
        </ModalContext.Provider>
    );
};

export const useModal = () => {
    const context = useContext(ModalContext);
    if (context === undefined) {
        throw new Error('useModal must be used within a ModalProvider');
    }
    return context;
};